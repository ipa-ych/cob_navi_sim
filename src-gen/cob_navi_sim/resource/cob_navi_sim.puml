@startuml

/'SUBSYSTEMS'/
component cob_gazebo {
  component gazebo {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_laserscan {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout cob_laserscan.cob_scan_left as "cob_scan_left" #blue
    portout cob_laserscan.cob_scan_right as "cob_scan_right" #blue
    portout cob_laserscan.cob_scan_front as "cob_scan_front" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_tricycle_controller {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin cob_tricycle_controller.tricycle_controller_cmd_vel_sub as "tricycle_controller/cmd_vel_sub" #blue
    portout cob_tricycle_controller.tf as "tf" #blue
    portout cob_tricycle_controller.odom_diff as "odom_diff" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component robot_state_publisher {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin robot_state_publisher.joint_states as "joint_states" #blue
    portout robot_state_publisher.tf as "tf" #blue
    portout robot_state_publisher.tf_static as "tf_static" #blue
    portout robot_state_publisher.robot_description as "robot_description" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component cob_joint_state {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout cob_joint_state.joint_states as "joint_states" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

 }
component cob_nav2 {
  component amcl {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component behavior_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component bt_navigator {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component controller_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component global_costmap {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component lifecycle_manager_localization {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component lifecycle_manager_navigation {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component local_costmap {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component map_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component planner_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component smoother_server {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component velocity_smoother {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component waypoint_follower {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/

/' PORTS FROM THE ORIGINAL NODE '/
  }

 }

  component joy_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout joy_node.joy as "joy" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component teleop_twist_joy_node {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout teleop_twist_joy_node.cmd_vel as "cmd_vel" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component twist_mux {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin twist_mux.cmd_vel as "cmd_vel" #blue
    portout twist_mux.tricycle_controller_cmd_vel as "tricycle_controller/cmd_vel" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component ros2_laserscan_merger {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portout ros2_laserscan_merger.cloud_in as "cloud_in" #blue
    portin ros2_laserscan_merger.base_laser_left_scan_raw as "base_laser_left/scan_raw" #blue
    portin ros2_laserscan_merger.base_laser_right_scan_raw as "base_laser_right/scan_raw" #blue
    portin ros2_laserscan_merger.base_laser_front_scan_raw as "base_laser_front/scan_raw" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component pointcloud_to_laserscan {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin pointcloud_to_laserscan.cloud_in as "cloud_in" #blue
    portout pointcloud_to_laserscan.scan as "scan" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component slam_toolbox {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin slam_toolbox.map as "map" #blue
    portin slam_toolbox.scan as "scan" #blue
    portout slam_toolbox.map as "map" #blue
    portout slam_toolbox.tf as "tf" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }

  component rviz2 {

/' PORTS DEFINED AS AVAILABLE IN THE ROSSYSTEM FILE '/
    portin rviz2.cloud_in as "cloud_in" #blue
    portin rviz2.map as "map" #blue
    portin rviz2.robot_description as "robot_description" #blue

/' PORTS FROM THE ORIGINAL NODE '/
  }


@enduml